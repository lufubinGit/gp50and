package com.host.gp50.app.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.host.gp50.app.ui.bean.Host;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOST".
*/
public class HostDao extends AbstractDao<Host, Long> {

    public static final String TABLENAME = "HOST";

    /**
     * Properties of entity Host.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property HostId = new Property(3, String.class, "hostId", false, "HOST_ID");
        public final static Property HostServiceProvider = new Property(4, String.class, "hostServiceProvider", false, "HOST_SERVICE_PROVIDER");
        public final static Property HostServiceProviderId = new Property(5, String.class, "hostServiceProviderId", false, "HOST_SERVICE_PROVIDER_ID");
        public final static Property HostAddress = new Property(6, String.class, "hostAddress", false, "HOST_ADDRESS");
        public final static Property HostVersion = new Property(7, String.class, "hostVersion", false, "HOST_VERSION");
        public final static Property HostIp = new Property(8, String.class, "hostIp", false, "HOST_IP");
        public final static Property HostType = new Property(9, int.class, "hostType", false, "HOST_TYPE");
        public final static Property Signal = new Property(10, int.class, "signal", false, "SIGNAL");
        public final static Property ArmState = new Property(11, int.class, "armState", false, "ARM_STATE");
        public final static Property ErrorCode = new Property(12, String.class, "errorCode", false, "ERROR_CODE");
        public final static Property AlarmCode = new Property(13, String.class, "alarmCode", false, "ALARM_CODE");
        public final static Property HostUserNumber = new Property(14, int.class, "hostUserNumber", false, "HOST_USER_NUMBER");
        public final static Property SubNumber = new Property(15, int.class, "subNumber", false, "SUB_NUMBER");
        public final static Property Latitude = new Property(16, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(17, Double.class, "longitude", false, "LONGITUDE");
        public final static Property IsMainUser = new Property(18, boolean.class, "isMainUser", false, "IS_MAIN_USER");
    }


    public HostDao(DaoConfig config) {
        super(config);
    }
    
    public HostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"ALIAS\" TEXT," + // 2: alias
                "\"HOST_ID\" TEXT," + // 3: hostId
                "\"HOST_SERVICE_PROVIDER\" TEXT," + // 4: hostServiceProvider
                "\"HOST_SERVICE_PROVIDER_ID\" TEXT," + // 5: hostServiceProviderId
                "\"HOST_ADDRESS\" TEXT," + // 6: hostAddress
                "\"HOST_VERSION\" TEXT," + // 7: hostVersion
                "\"HOST_IP\" TEXT," + // 8: hostIp
                "\"HOST_TYPE\" INTEGER NOT NULL ," + // 9: hostType
                "\"SIGNAL\" INTEGER NOT NULL ," + // 10: signal
                "\"ARM_STATE\" INTEGER NOT NULL ," + // 11: armState
                "\"ERROR_CODE\" TEXT," + // 12: errorCode
                "\"ALARM_CODE\" TEXT," + // 13: alarmCode
                "\"HOST_USER_NUMBER\" INTEGER NOT NULL ," + // 14: hostUserNumber
                "\"SUB_NUMBER\" INTEGER NOT NULL ," + // 15: subNumber
                "\"LATITUDE\" REAL," + // 16: latitude
                "\"LONGITUDE\" REAL," + // 17: longitude
                "\"IS_MAIN_USER\" INTEGER NOT NULL );"); // 18: isMainUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Host entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String hostId = entity.getHostId();
        if (hostId != null) {
            stmt.bindString(4, hostId);
        }
 
        String hostServiceProvider = entity.getHostServiceProvider();
        if (hostServiceProvider != null) {
            stmt.bindString(5, hostServiceProvider);
        }
 
        String hostServiceProviderId = entity.getHostServiceProviderId();
        if (hostServiceProviderId != null) {
            stmt.bindString(6, hostServiceProviderId);
        }
 
        String hostAddress = entity.getHostAddress();
        if (hostAddress != null) {
            stmt.bindString(7, hostAddress);
        }
 
        String hostVersion = entity.getHostVersion();
        if (hostVersion != null) {
            stmt.bindString(8, hostVersion);
        }
 
        String hostIp = entity.getHostIp();
        if (hostIp != null) {
            stmt.bindString(9, hostIp);
        }
        stmt.bindLong(10, entity.getHostType());
        stmt.bindLong(11, entity.getSignal());
        stmt.bindLong(12, entity.getArmState());
 
        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(13, errorCode);
        }
 
        String alarmCode = entity.getAlarmCode();
        if (alarmCode != null) {
            stmt.bindString(14, alarmCode);
        }
        stmt.bindLong(15, entity.getHostUserNumber());
        stmt.bindLong(16, entity.getSubNumber());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(17, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(18, longitude);
        }
        stmt.bindLong(19, entity.getIsMainUser() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Host entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String hostId = entity.getHostId();
        if (hostId != null) {
            stmt.bindString(4, hostId);
        }
 
        String hostServiceProvider = entity.getHostServiceProvider();
        if (hostServiceProvider != null) {
            stmt.bindString(5, hostServiceProvider);
        }
 
        String hostServiceProviderId = entity.getHostServiceProviderId();
        if (hostServiceProviderId != null) {
            stmt.bindString(6, hostServiceProviderId);
        }
 
        String hostAddress = entity.getHostAddress();
        if (hostAddress != null) {
            stmt.bindString(7, hostAddress);
        }
 
        String hostVersion = entity.getHostVersion();
        if (hostVersion != null) {
            stmt.bindString(8, hostVersion);
        }
 
        String hostIp = entity.getHostIp();
        if (hostIp != null) {
            stmt.bindString(9, hostIp);
        }
        stmt.bindLong(10, entity.getHostType());
        stmt.bindLong(11, entity.getSignal());
        stmt.bindLong(12, entity.getArmState());
 
        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(13, errorCode);
        }
 
        String alarmCode = entity.getAlarmCode();
        if (alarmCode != null) {
            stmt.bindString(14, alarmCode);
        }
        stmt.bindLong(15, entity.getHostUserNumber());
        stmt.bindLong(16, entity.getSubNumber());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(17, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(18, longitude);
        }
        stmt.bindLong(19, entity.getIsMainUser() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Host readEntity(Cursor cursor, int offset) {
        Host entity = new Host( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hostId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hostServiceProvider
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hostServiceProviderId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hostAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hostVersion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hostIp
            cursor.getInt(offset + 9), // hostType
            cursor.getInt(offset + 10), // signal
            cursor.getInt(offset + 11), // armState
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // errorCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // alarmCode
            cursor.getInt(offset + 14), // hostUserNumber
            cursor.getInt(offset + 15), // subNumber
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // latitude
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // longitude
            cursor.getShort(offset + 18) != 0 // isMainUser
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Host entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHostId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHostServiceProvider(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHostServiceProviderId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHostAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHostVersion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHostIp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHostType(cursor.getInt(offset + 9));
        entity.setSignal(cursor.getInt(offset + 10));
        entity.setArmState(cursor.getInt(offset + 11));
        entity.setErrorCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAlarmCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHostUserNumber(cursor.getInt(offset + 14));
        entity.setSubNumber(cursor.getInt(offset + 15));
        entity.setLatitude(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setLongitude(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setIsMainUser(cursor.getShort(offset + 18) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Host entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Host entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Host entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
