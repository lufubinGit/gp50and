package com.host.gp50.app.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.host.gp50.app.ui.bean.Sms;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMS".
*/
public class SmsDao extends AbstractDao<Sms, Long> {

    public static final String TABLENAME = "SMS";

    /**
     * Properties of entity Sms.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HostId = new Property(1, String.class, "hostId", false, "HOST_ID");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property SmsNumber = new Property(3, String.class, "smsNumber", false, "SMS_NUMBER");
        public final static Property IsArm = new Property(4, boolean.class, "isArm", false, "IS_ARM");
        public final static Property IsAlarm = new Property(5, boolean.class, "isAlarm", false, "IS_ALARM");
        public final static Property IsError = new Property(6, boolean.class, "isError", false, "IS_ERROR");
    }


    public SmsDao(DaoConfig config) {
        super(config);
    }
    
    public SmsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HOST_ID\" TEXT," + // 1: hostId
                "\"ALIAS\" TEXT," + // 2: alias
                "\"SMS_NUMBER\" TEXT," + // 3: smsNumber
                "\"IS_ARM\" INTEGER NOT NULL ," + // 4: isArm
                "\"IS_ALARM\" INTEGER NOT NULL ," + // 5: isAlarm
                "\"IS_ERROR\" INTEGER NOT NULL );"); // 6: isError
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hostId = entity.getHostId();
        if (hostId != null) {
            stmt.bindString(2, hostId);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String smsNumber = entity.getSmsNumber();
        if (smsNumber != null) {
            stmt.bindString(4, smsNumber);
        }
        stmt.bindLong(5, entity.getIsArm() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsAlarm() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsError() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sms entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hostId = entity.getHostId();
        if (hostId != null) {
            stmt.bindString(2, hostId);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
 
        String smsNumber = entity.getSmsNumber();
        if (smsNumber != null) {
            stmt.bindString(4, smsNumber);
        }
        stmt.bindLong(5, entity.getIsArm() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsAlarm() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsError() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sms readEntity(Cursor cursor, int offset) {
        Sms entity = new Sms( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hostId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // smsNumber
            cursor.getShort(offset + 4) != 0, // isArm
            cursor.getShort(offset + 5) != 0, // isAlarm
            cursor.getShort(offset + 6) != 0 // isError
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sms entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHostId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSmsNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsArm(cursor.getShort(offset + 4) != 0);
        entity.setIsAlarm(cursor.getShort(offset + 5) != 0);
        entity.setIsError(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sms entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sms entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sms entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
